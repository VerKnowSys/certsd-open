[package]
name = "certsd"
version = "0.6.7"
edition = "2021"
authors = ["Daniel (dmilith) Dettlaff <dmilith@me.com>"]
description = "CertsD - automated, asynchronous LE certificate issuer."
keywords = ["acme"]
categories = ["asynchronous"]
homepage = "https://github.com/VerKnowSys/certsd-open"
license = "MIT"


# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
tracing = { version = "0.1.36", features = ["log", "attributes", "std"] }
tracing-subscriber = { version = "0.3.15", features = ["registry", "fmt", "env-filter"] }
serde = { version = "1.0", features = ["derive"] }
anyhow = "1.0.70"
tokio = { version = "1.27.0", features = ["macros", "tokio-macros", "fs"] }
cloudflare = "0.10.1"
hyperacme = "0.0.3"
openssl = "0.10.50"
async-recursion = "1.0.4"
chrono = "0.4.24"
ron = "0.8.0"
slack-hook2 = "0.10.1"
telegram-bot-api = "0.1.2"


# The release profile, used for `cargo build --release`.
[profile.release]
opt-level = 3
debug = false
rpath = false
lto = true
debug-assertions = false
codegen-units = 1
panic = 'abort'
incremental = false
overflow-checks = true


# The benchmarking profile, used for `cargo bench` and `cargo test --release`.
[profile.bench]
opt-level = 3
debug = false
rpath = false
lto = true
debug-assertions = false
codegen-units = 1
incremental = false
overflow-checks = true


# The testing profile, used for `cargo test`.
[profile.test]
opt-level = 1
debug = 2
rpath = false
lto = false
debug-assertions = true
codegen-units = 12
incremental = true
overflow-checks = true


# The development (default) profile, used for `cargo build`.
[profile.dev]
opt-level = 0                 # controls the `--opt-level` the compiler builds with.
                              # 0-1 is good for debugging. 2 is well-optimized. Max is 3.
                              # 's' attempts to reduce size, 'z' reduces size even more.
debug = 2                     # (u32 or bool) Include debug information (debug symbols).
                              # Equivalent to `-C debuginfo=2` compiler flag.
debug-assertions = true       # controls whether debug assertions are enabled
                              # (e.g. debug_assert!() and arithmetic overflow checks)
rpath = false                 # controls whether compiler should set loader paths.
                              # If true, passes `-C rpath` flag to the compiler.
lto = false                   # Link Time Optimization usually reduces size of binaries
                              # and static libraries. Increases compilation time.
                              # If true, passes `-C lto` flag to the compiler, and if a
                              # string is specified like 'thin' then `-C lto=thin` will
                              # be passed.
codegen-units = 8             # if > 1 enables parallel code generation which improves
                              # compile times, but prevents some optimizations.
                              # Passes `-C codegen-units`.
panic = 'unwind'              # panic strategy (`-C panic=...`), can also be 'abort'
incremental = true            # whether or not incremental compilation is enabled
overflow-checks = true        # use overflow checks for integer arithmetic.
                              # Passes the `-C overflow-checks=...` flag to the compiler.
